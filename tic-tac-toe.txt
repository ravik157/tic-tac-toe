<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe (Player vs. Computer)</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(to right, #84fab0, #8fd3f4); /* Green-blue gradient */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
            box-sizing: border-box;
        }
        .game-container {
            background-color: white;
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
            text-align: center;
            max-width: 450px;
            width: 100%;
        }
        .game-title {
            font-size: 2.5rem;
            font-weight: 700;
            color: #2f855a; /* green-700 */
            margin-bottom: 20px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }
        .status-display {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 25px;
            color: #2d3748;
            min-height: 30px; /* Prevent CLS */
        }
        .board-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-rows: repeat(3, 1fr);
            gap: 10px;
            width: 100%;
            max-width: 300px;
            aspect-ratio: 1 / 1; /* Keep board square */
            margin: 0 auto 30px auto;
        }
        .cell {
            background-color: #e2e8f0; /* gray-200 */
            width: 100%;
            height: 100px; /* Fixed height for cells */
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 4rem; /* Large font size for X/O */
            font-weight: 700;
            color: #2d3748;
            border-radius: 10px;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
        }
        .cell:hover {
            background-color: #cbd5e0; /* gray-300 */
            transform: scale(1.02);
        }
        .cell.x {
            color: #e53e3e; /* red-600 */
        }
        .cell.o {
            color: #3182ce; /* blue-600 */
        }
        .cell.win {
            background-color: #48bb78; /* green-500 */
            color: white;
            box-shadow: 0 0 15px rgba(72, 187, 120, 0.7);
        }
        .reset-button {
            background-color: #4299e1; /* blue-500 */
            color: white;
            padding: 12px 25px;
            border-radius: 10px;
            font-weight: 600;
            font-size: 1.125rem;
            cursor: pointer;
            border: none;
            transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
            box-shadow: 0 4px 10px rgba(66, 153, 225, 0.4);
        }
        .reset-button:hover {
            background-color: #3182ce; /* blue-600 */
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(66, 153, 225, 0.5);
        }
        .reset-button:active {
            transform: translateY(0);
            box-shadow: 0 2px 5px rgba(66, 153, 225, 0.3);
        }

        /* Responsive adjustments for cell size on smaller screens */
        @media (max-width: 400px) {
            .cell {
                height: 80px;
                font-size: 3rem;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1 class="game-title">Tic-Tac-Toe</h1>
        <div id="status" class="status-display">Player X's Turn</div>

        <div class="board-container" id="gameBoard">
            <div class="cell" data-index="0"></div>
            <div class="cell" data-index="1"></div>
            <div class="cell" data-index="2"></div>
            <div class="cell" data-index="3"></div>
            <div class="cell" data-index="4"></div>
            <div class="cell" data-index="5"></div>
            <div class="cell" data-index="6"></div>
            <div class="cell" data-index="7"></div>
            <div class="cell" data-index="8"></div>
        </div>

        <button id="resetButton" class="reset-button">Restart Game</button>
    </div>

    <script>
        // Game variables
        const board = ['', '', '', '', '', '', '', '', '']; // Represents the 3x3 board
        let currentPlayer = 'X'; // 'X' for human, 'O' for computer
        let gameActive = true; // True while the game is ongoing

        // Get DOM elements
        const cells = document.querySelectorAll('.cell');
        const statusDisplay = document.getElementById('status');
        const resetButton = document.getElementById('resetButton');

        // Winning combinations (indices of the board array)
        const winningConditions = [
            [0, 1, 2], // Top row
            [3, 4, 5], // Middle row
            [6, 7, 8], // Bottom row
            [0, 3, 6], // Left column
            [1, 4, 7], // Middle column
            [2, 5, 8], // Right column
            [0, 4, 8], // Diagonal (top-left to bottom-right)
            [2, 4, 6]  // Diagonal (top-right to bottom-left)
        ];

        /**
         * Initializes or resets the game state and UI.
         */
        function initializeGame() {
            // Reset board array to empty strings
            board.fill('');
            // Set current player to X (human)
            currentPlayer = 'X';
            // Set game to active
            gameActive = true;
            // Clear content and classes from all cells
            cells.forEach(cell => {
                cell.textContent = '';
                cell.classList.remove('x', 'o', 'win');
            });
            // Update status display
            statusDisplay.textContent = "Player X's Turn";
            statusDisplay.style.color = '#2d3748'; // Reset status color
        }

        /**
         * Checks the current game board for a win or a draw.
         * @returns {{status: string, winningCells: number[] | null}} - Object indicating game status and winning cells if any.
         */
        function checkGameStatus() {
            // Check for win
            for (let i = 0; i < winningConditions.length; i++) {
                const winCondition = winningConditions[i];
                const a = board[winCondition[0]];
                const b = board[winCondition[1]];
                const c = board[winCondition[2]];

                // If any cell in the condition is empty, it's not a win yet
                if (a === '' || b === '' || c === '') {
                    continue;
                }
                // If all three match, a player has won
                if (a === b && b === c) {
                    return { status: 'win', winningCells: winCondition };
                }
            }

            // Check for draw (if no empty cells left and no win)
            if (!board.includes('')) {
                return { status: 'draw', winningCells: null };
            }

            // Game is still active
            return { status: 'continue', winningCells: null };
        }

        /**
         * Handles the game's end state (win or draw).
         * @param {object} gameResult - Object returned by checkGameStatus.
         * @param {string} lastPlayerMoved - The player who just made the move ('X' or 'O').
         */
        function handleGameEnd(gameResult, lastPlayerMoved) {
            if (gameResult.status === 'win') {
                statusDisplay.textContent = `Player ${lastPlayerMoved} Wins!`;
                statusDisplay.style.color = '#48bb78'; // Green for win
                gameActive = false; // End the game
                // Highlight winning cells
                gameResult.winningCells.forEach(index => {
                    cells[index].classList.add('win');
                });
            } else if (gameResult.status === 'draw') {
                statusDisplay.textContent = "It's a Draw!";
                statusDisplay.style.color = '#e53e3e'; // Red for draw
                gameActive = false; // End the game
            }
        }

        /**
         * The computer's turn logic.
         * The computer (Player O) makes a random move from available cells.
         */
        function computerMove() {
            if (!gameActive) {
                return; // Do nothing if game is already over
            }

            // Find all empty cells
            const availableCells = [];
            board.forEach((cell, index) => {
                if (cell === '') {
                    availableCells.push(index);
                }
            });

            // If no moves left (should have been caught by draw check, but good safety)
            if (availableCells.length === 0) {
                return;
            }

            // Choose a random available cell for the computer's move
            const randomIndex = availableCells[Math.floor(Math.random() * availableCells.length)];

            // Make the computer's move
            board[randomIndex] = 'O';
            cells[randomIndex].textContent = 'O';
            cells[randomIndex].classList.add('o');

            // Check game status after computer's move
            const gameResult = checkGameStatus();
            if (gameResult.status !== 'continue') {
                handleGameEnd(gameResult, 'O'); // Handle win/draw
            } else {
                // If game continues, it's now Player X's (human's) turn
                currentPlayer = 'X';
                statusDisplay.textContent = "Player X's Turn";
                statusDisplay.style.color = '#2d3748';
            }
        }

        /**
         * Handles a human player's cell click event.
         * Places the human player's mark if the cell is empty and the game is active.
         * Triggers computer's turn if the game continues.
         * @param {Event} event - The click event object.
         */
        function handleCellClick(event) {
            const clickedCell = event.target;
            const clickedCellIndex = parseInt(clickedCell.dataset.index);

            // If the cell is already filled, or game is not active, or it's not human's turn, do nothing
            if (board[clickedCellIndex] !== '' || !gameActive || currentPlayer !== 'X') {
                return;
            }

            // Make the human's move (Player X)
            board[clickedCellIndex] = 'X';
            clickedCell.textContent = 'X';
            clickedCell.classList.add('x');

            // Check game status after human's move
            const gameResult = checkGameStatus();
            if (gameResult.status !== 'continue') {
                handleGameEnd(gameResult, 'X'); // Handle win/draw
            } else {
                // If game continues, switch to computer's turn and add a small delay
                currentPlayer = 'O'; // It's now the computer's turn
                statusDisplay.textContent = "Computer's Turn...";
                statusDisplay.style.color = '#2d3748';
                setTimeout(computerMove, 700); // 700ms delay for computer's move
            }
        }

        // Event Listeners
        // Add click listener to each cell
        cells.forEach(cell => cell.addEventListener('click', handleCellClick));
        // Add click listener to the reset button
        resetButton.addEventListener('click', initializeGame);

        // Initialize the game when the page loads
        window.onload = initializeGame;
    </script>
</body>
</html>
